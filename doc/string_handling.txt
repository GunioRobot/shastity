= Strings in the shastity code base =

The absolutely most important rule to remember is:

  "Character strings are not byte strings."

Please repeat that 10 times in your head :)

A character string is a string (sequence) of characters. A byte string
is a string (sequence) of bytes. What people may often call a "utf-8
string" is actually "a byte string containing the UTF-8 encoding of a
character string". You may substitute "byte array" for "byte string"
if you wish.

Whenever the word "string" is used in the code base, it means
character string unless otherwise stated. In Python 2.x, this means
that it is one of:

  - a str instance containing US ASCII (7 bit) content.
  - a unicode instance

Actually encoding/decoding strings only happen when some data
logically crosses the character/byte boundary, or a generic
character/ASCII character boundary. Thus, there is no sprinkling of
conversions and/or UTF-8 assumptions all over the code.

It is very unfortunate that the unicde support in Python 2.x is
designed and documented such that a lot of people end up intermixing
these concepts, resulting in a lot of code bases out there behaving
incorrectly in the face of unicode. Hopefully this will improve with
Python 3.x where byte strings and character strings are finally
disjoint types.
